import java.text.SimpleDateFormat

plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

def buildDate = new Date()
def branch = gitBranch()
def ci = System.getenv("CI") != null
def isDev = project.mod_version.endsWith('-dev')

if (isDev && !ci) {
	def df = new SimpleDateFormat(".yyyyMMdd.HHmmss")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	project.mod_version += df.format(buildDate)
}
if (branch != "master" && branch != "HEAD") {
	project.mod_version += "+" + branch.replaceAll("[+-]", '_')
}
if (isDev && ci) {
	project.mod_version += "+" + gitCommit().substring(0, 7)
}

archivesBaseName = project.name
version = project.mod_version
group = project.maven_group

minecraft {
	accessWidener "src/main/resources/skyblock.accesswidener"
}

repositories {
	maven {
		name = 'skyrising'
		url = 'https://maven.skyrising.xyz/'
	}
	maven {
		name = 'masa'
		url = 'https://masa.dy.fi/maven/'
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// javax.annotation.Nullable/Nonnull
	compileOnly "com.google.code.findbugs:jsr305:3.0.1"

	modImplementation "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.fabric_resource_loader_v0_version}"
	modCompileOnly "quickcarpet:quickcarpet-api:${project.quickcarpet_api_version}"
}

static def gitCommit() {
	def githubCommit = System.getenv("GITHUB_SHA")
	if (githubCommit != null) return githubCommit
	def commit = ""
	def proc = "git rev-parse HEAD".execute()
	proc.in.eachLine { line -> commit = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()
	commit
}

static def gitBranch() {
	def githubBranch = System.getenv("GITHUB_REF")
	if (githubBranch != null) return githubBranch.substring(githubBranch.lastIndexOf('/') + 1)
	def branch = ""
	def proc = "git rev-parse --abbrev-ref HEAD".execute()
	proc.in.eachLine { line -> branch = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()
	branch
}

static def gitStatus() {
	def exitCode = "git diff --quiet".execute().waitFor() // not added
	if (exitCode == 0) {
		exitCode = "git diff --cached --quiet".execute().waitFor() // not committed
	}
	exitCode == 0
}

task generateJava(type: Copy) {
	def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	def templateContext = [
			version: project.version,
			timestamp: df.format(buildDate),
			branch: gitBranch(),
			commit: gitCommit(),
			working_dir_clean: gitStatus(),
			minecraft_version: project.minecraft_version,
			yarn_mappings: project.yarn_mappings
	]
	inputs.properties templateContext // for gradle up-to-date check
	from 'src/template/java'
	into "$buildDir/generated/java"
	expand templateContext
}

sourceSets.main.java.srcDir "$buildDir/generated/java"
compileJava.dependsOn generateJava

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand properties
	}
}


tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	it.options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}