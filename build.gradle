import java.text.SimpleDateFormat

plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def buildDate = new Date()
def branch = gitBranch()
def ci = System.getenv("CI") != null
def isDev = project.mod_version.endsWith('-dev')

if (isDev && !ci) {
	def df = new SimpleDateFormat(".yyyyMMdd.HHmmss")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	project.mod_version += df.format(buildDate)
}
if (branch != "master" && branch != "HEAD") {
	project.mod_version += "+" + branch.replaceAll("[+-]", '_')
}
if (isDev && ci) {
	project.mod_version += "+" + gitCommit().substring(0, 7)
}

archivesBaseName = project.name
version = project.mod_version
group = project.maven_group

minecraft {
	accessWidener "src/main/resources/skyblock.accesswidener"
}

repositories {
	maven {
		name = 'skyrising'
		url = 'https://maven.skyrising.xyz/'
	}
	maven {
		name = 'masa'
		url = 'https://masa.dy.fi/maven/'
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	// javax.annotation.Nullable/Nonnull
	compileOnly "com.google.code.findbugs:jsr305:3.0.1"

	modImplementation "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.fabric_resource_loader_v0_version}"
	modImplementation "quickcarpet:quickcarpet-api:${project.quickcarpet_api_version}"
}

static def gitCommit() {
	def githubCommit = System.getenv("GITHUB_SHA")
	if (githubCommit != null) return githubCommit
	def commit = ""
	def proc = "git rev-parse HEAD".execute()
	proc.in.eachLine { line -> commit = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()
	commit
}

static def gitBranch() {
	def githubBranch = System.getenv("GITHUB_REF")
	if (githubBranch != null) return githubBranch.substring(githubBranch.lastIndexOf('/') + 1)
	def branch = ""
	def proc = "git rev-parse --abbrev-ref HEAD".execute()
	proc.in.eachLine { line -> branch = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()
	branch
}

static def gitStatus() {
	def exitCode = "git diff --quiet".execute().waitFor() // not added
	if (exitCode == 0) {
		exitCode = "git diff --cached --quiet".execute().waitFor() // not committed
	}
	exitCode == 0
}

task generateJava(type: Copy) {
	def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	def templateContext = [
			version: project.version,
			timestamp: df.format(buildDate),
			branch: gitBranch(),
			commit: gitCommit(),
			working_dir_clean: gitStatus(),
			minecraft_version: project.minecraft_version,
			yarn_mappings: project.yarn_mappings
	]
	inputs.properties templateContext // for gradle up-to-date check
	from 'src/template/java'
	into "$buildDir/generated/java"
	expand templateContext
}

sourceSets.main.java.srcDir "$buildDir/generated/java"
compileJava.dependsOn generateJava

processResources {
	// this will ensure that this task is re-run when there's a change
	inputs.property "version", project.version

	// replace stuff in fabric.mod.json, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"

		// add mod metadata
		expand "version": project.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}