import java.text.SimpleDateFormat

plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower-mini' version '1.2.1'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def buildDate = new Date()
def branch = GitHelper.getBranch(rootDir)
def ver = GitHelper.getVersion(rootDir, project.mod_version)

if (branch != "master" && branch != "HEAD" && ver.pre.size() >= 2) {
	ver.pre.add(0, branch.replaceAll("[+-]", '_'))
}

println ver

version = ver.toString()

archivesBaseName = project.name
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/skyblock.accesswidener")
}

repositories {
	maven {
		name = 'skyrising'
		url = 'https://maven.skyrising.xyz/'
	}
	maven {
		name = 'masa'
		url = 'https://masa.dy.fi/maven/'
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// javax.annotation.Nullable/Nonnull
	compileOnly "com.google.code.findbugs:jsr305:3.0.1"

	modImplementation "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.fabric_resource_loader_v0_version}"
	modCompileOnly "quickcarpet:quickcarpet-api:${project.quickcarpet_api_version}"
}

task generateJava(type: Copy) {
	def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	def templateContext = [
			version: project.version,
			timestamp: df.format(buildDate),
			branch: GitHelper.getBranch(rootDir),
			commit: GitHelper.getCommit(rootDir),
			working_dir_clean: GitHelper.getStatus(rootDir),
			minecraft_version: project.minecraft_version,
			yarn_mappings: project.yarn_mappings
	]
	inputs.properties templateContext // for gradle up-to-date check
	from 'src/template/java'
	into "$buildDir/generated/java"
	expand templateContext
}

sourceSets.main.java.srcDir "$buildDir/generated/java"
compileJava.dependsOn generateJava

processResources {
	def properties = [
		version: rootProject.version,
	]
	inputs.properties properties

	filesMatching("fabric.mod.json") {
		expand properties
	}
}


tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	it.options.release = 17
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}